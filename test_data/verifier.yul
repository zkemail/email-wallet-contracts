
        object "plonk_verifier" {
            code {
                function allocate(size) -> ptr {
                    ptr := mload(0x40)
                    if eq(ptr, 0) { ptr := 0x60 }
                    mstore(0x40, add(ptr, size))
                }
                let size := datasize("Runtime")
                let offset := allocate(size)
                datacopy(offset, dataoffset("Runtime"), size)
                return(offset, size)
            }
            object "Runtime" {
                code {
                    let success := true
                    let f_p := 0x30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47
                    let f_q := 0x30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001
                    function validate_ec_point(x, y) -> valid {
                        {
                            let x_lt_p := lt(x, 0x30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47)
                            let y_lt_p := lt(y, 0x30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47)
                            valid := and(x_lt_p, y_lt_p)
                        }
                        {
                            let x_is_zero := eq(x, 0)
                            let y_is_zero := eq(y, 0)
                            let x_or_y_is_zero := or(x_is_zero, y_is_zero)
                            let x_and_y_is_not_zero := not(x_or_y_is_zero)
                            valid := and(x_and_y_is_not_zero, valid)
                        }
                        {
                            let y_square := mulmod(y, y, 0x30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47)
                            let x_square := mulmod(x, x, 0x30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47)
                            let x_cube := mulmod(x_square, x, 0x30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47)
                            let x_cube_plus_3 := addmod(x_cube, 3, 0x30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47)
                            let y_square_eq_x_cube_plus_3 := eq(x_cube_plus_3, y_square)
                            valid := and(y_square_eq_x_cube_plus_3, valid)
                        }
                    }
                    mstore(0x20, mod(calldataload(0x0), f_q))
mstore(0x40, mod(calldataload(0x20), f_q))
mstore(0x60, mod(calldataload(0x40), f_q))
mstore(0x80, mod(calldataload(0x60), f_q))
mstore(0xa0, mod(calldataload(0x80), f_q))
mstore(0xc0, mod(calldataload(0xa0), f_q))
mstore(0xe0, mod(calldataload(0xc0), f_q))
mstore(0x100, mod(calldataload(0xe0), f_q))
mstore(0x120, mod(calldataload(0x100), f_q))
mstore(0x140, mod(calldataload(0x120), f_q))
mstore(0x160, mod(calldataload(0x140), f_q))
mstore(0x180, mod(calldataload(0x160), f_q))
mstore(0x1a0, mod(calldataload(0x180), f_q))
mstore(0x1c0, mod(calldataload(0x1a0), f_q))
mstore(0x0, 6239576148428485684541164309811669271287184001377876996293223870478722761346)

        {
            let x := calldataload(0x1c0)
            mstore(0x1e0, x)
            let y := calldataload(0x1e0)
            mstore(0x200, y)
            success := and(validate_ec_point(x, y), success)
        }

        {
            let x := calldataload(0x200)
            mstore(0x220, x)
            let y := calldataload(0x220)
            mstore(0x240, y)
            success := and(validate_ec_point(x, y), success)
        }

        {
            let x := calldataload(0x240)
            mstore(0x260, x)
            let y := calldataload(0x260)
            mstore(0x280, y)
            success := and(validate_ec_point(x, y), success)
        }

        {
            let x := calldataload(0x280)
            mstore(0x2a0, x)
            let y := calldataload(0x2a0)
            mstore(0x2c0, y)
            success := and(validate_ec_point(x, y), success)
        }
mstore(0x2e0, keccak256(0x0, 736))
{
            let hash := mload(0x2e0)
            mstore(0x300, mod(hash, f_q))
            mstore(0x320, hash)
        }

        {
            let x := calldataload(0x2c0)
            mstore(0x340, x)
            let y := calldataload(0x2e0)
            mstore(0x360, y)
            success := and(validate_ec_point(x, y), success)
        }

        {
            let x := calldataload(0x300)
            mstore(0x380, x)
            let y := calldataload(0x320)
            mstore(0x3a0, y)
            success := and(validate_ec_point(x, y), success)
        }
mstore(0x3c0, keccak256(0x320, 160))
{
            let hash := mload(0x3c0)
            mstore(0x3e0, mod(hash, f_q))
            mstore(0x400, hash)
        }
mstore8(1056, 1)
mstore(0x420, keccak256(0x400, 33))
{
            let hash := mload(0x420)
            mstore(0x440, mod(hash, f_q))
            mstore(0x460, hash)
        }

        {
            let x := calldataload(0x340)
            mstore(0x480, x)
            let y := calldataload(0x360)
            mstore(0x4a0, y)
            success := and(validate_ec_point(x, y), success)
        }

        {
            let x := calldataload(0x380)
            mstore(0x4c0, x)
            let y := calldataload(0x3a0)
            mstore(0x4e0, y)
            success := and(validate_ec_point(x, y), success)
        }

        {
            let x := calldataload(0x3c0)
            mstore(0x500, x)
            let y := calldataload(0x3e0)
            mstore(0x520, y)
            success := and(validate_ec_point(x, y), success)
        }

        {
            let x := calldataload(0x400)
            mstore(0x540, x)
            let y := calldataload(0x420)
            mstore(0x560, y)
            success := and(validate_ec_point(x, y), success)
        }

        {
            let x := calldataload(0x440)
            mstore(0x580, x)
            let y := calldataload(0x460)
            mstore(0x5a0, y)
            success := and(validate_ec_point(x, y), success)
        }
mstore(0x5c0, keccak256(0x460, 352))
{
            let hash := mload(0x5c0)
            mstore(0x5e0, mod(hash, f_q))
            mstore(0x600, hash)
        }

        {
            let x := calldataload(0x480)
            mstore(0x620, x)
            let y := calldataload(0x4a0)
            mstore(0x640, y)
            success := and(validate_ec_point(x, y), success)
        }

        {
            let x := calldataload(0x4c0)
            mstore(0x660, x)
            let y := calldataload(0x4e0)
            mstore(0x680, y)
            success := and(validate_ec_point(x, y), success)
        }

        {
            let x := calldataload(0x500)
            mstore(0x6a0, x)
            let y := calldataload(0x520)
            mstore(0x6c0, y)
            success := and(validate_ec_point(x, y), success)
        }
mstore(0x6e0, keccak256(0x600, 224))
{
            let hash := mload(0x6e0)
            mstore(0x700, mod(hash, f_q))
            mstore(0x720, hash)
        }
mstore(0x740, mod(calldataload(0x540), f_q))
mstore(0x760, mod(calldataload(0x560), f_q))
mstore(0x780, mod(calldataload(0x580), f_q))
mstore(0x7a0, mod(calldataload(0x5a0), f_q))
mstore(0x7c0, mod(calldataload(0x5c0), f_q))
mstore(0x7e0, mod(calldataload(0x5e0), f_q))
mstore(0x800, mod(calldataload(0x600), f_q))
mstore(0x820, mod(calldataload(0x620), f_q))
mstore(0x840, mod(calldataload(0x640), f_q))
mstore(0x860, mod(calldataload(0x660), f_q))
mstore(0x880, mod(calldataload(0x680), f_q))
mstore(0x8a0, mod(calldataload(0x6a0), f_q))
mstore(0x8c0, mod(calldataload(0x6c0), f_q))
mstore(0x8e0, mod(calldataload(0x6e0), f_q))
mstore(0x900, mod(calldataload(0x700), f_q))
mstore(0x920, mod(calldataload(0x720), f_q))
mstore(0x940, mod(calldataload(0x740), f_q))
mstore(0x960, mod(calldataload(0x760), f_q))
mstore(0x980, mod(calldataload(0x780), f_q))
mstore(0x9a0, mod(calldataload(0x7a0), f_q))
mstore(0x9c0, mod(calldataload(0x7c0), f_q))
mstore(0x9e0, mod(calldataload(0x7e0), f_q))
mstore(0xa00, mod(calldataload(0x800), f_q))
mstore(0xa20, mod(calldataload(0x820), f_q))
mstore(0xa40, mod(calldataload(0x840), f_q))
mstore(0xa60, mod(calldataload(0x860), f_q))
mstore(0xa80, mod(calldataload(0x880), f_q))
mstore(0xaa0, mod(calldataload(0x8a0), f_q))
mstore(0xac0, mod(calldataload(0x8c0), f_q))
mstore(0xae0, mod(calldataload(0x8e0), f_q))
mstore(0xb00, mod(calldataload(0x900), f_q))
mstore(0xb20, mod(calldataload(0x920), f_q))
mstore(0xb40, mod(calldataload(0x940), f_q))
mstore(0xb60, mod(calldataload(0x960), f_q))
mstore(0xb80, mod(calldataload(0x980), f_q))
mstore(0xba0, mod(calldataload(0x9a0), f_q))
mstore(0xbc0, mod(calldataload(0x9c0), f_q))
mstore(0xbe0, keccak256(0x720, 1216))
{
            let hash := mload(0xbe0)
            mstore(0xc00, mod(hash, f_q))
            mstore(0xc20, hash)
        }

        {
            let x := calldataload(0x9e0)
            mstore(0xc40, x)
            let y := calldataload(0xa00)
            mstore(0xc60, y)
            success := and(validate_ec_point(x, y), success)
        }

        {
            let x := calldataload(0xa20)
            mstore(0xc80, x)
            let y := calldataload(0xa40)
            mstore(0xca0, y)
            success := and(validate_ec_point(x, y), success)
        }

        {
            let x := calldataload(0xa60)
            mstore(0xcc0, x)
            let y := calldataload(0xa80)
            mstore(0xce0, y)
            success := and(validate_ec_point(x, y), success)
        }

        {
            let x := calldataload(0xaa0)
            mstore(0xd00, x)
            let y := calldataload(0xac0)
            mstore(0xd20, y)
            success := and(validate_ec_point(x, y), success)
        }

        {
            let x := calldataload(0xae0)
            mstore(0xd40, x)
            let y := calldataload(0xb00)
            mstore(0xd60, y)
            success := and(validate_ec_point(x, y), success)
        }

        {
            let x := calldataload(0xb20)
            mstore(0xd80, x)
            let y := calldataload(0xb40)
            mstore(0xda0, y)
            success := and(validate_ec_point(x, y), success)
        }
mstore(0xdc0, keccak256(0xc20, 416))
{
            let hash := mload(0xdc0)
            mstore(0xde0, mod(hash, f_q))
            mstore(0xe00, hash)
        }
{
            let x := mload(0x20)
x := add(x, shl(88, mload(0x40)))
x := add(x, shl(176, mload(0x60)))
mstore(3616, x)
let y := mload(0x80)
y := add(y, shl(88, mload(0xa0)))
y := add(y, shl(176, mload(0xc0)))
mstore(3648, y)

            success := and(validate_ec_point(x, y), success)
        }
{
            let x := mload(0xe0)
x := add(x, shl(88, mload(0x100)))
x := add(x, shl(176, mload(0x120)))
mstore(3680, x)
let y := mload(0x140)
y := add(y, shl(88, mload(0x160)))
y := add(y, shl(176, mload(0x180)))
mstore(3712, y)

            success := and(validate_ec_point(x, y), success)
        }
mstore(0xea0, mulmod(mload(0x700), mload(0x700), f_q))
mstore(0xec0, mulmod(mload(0xea0), mload(0xea0), f_q))
mstore(0xee0, mulmod(mload(0xec0), mload(0xec0), f_q))
mstore(0xf00, mulmod(mload(0xee0), mload(0xee0), f_q))
mstore(0xf20, mulmod(mload(0xf00), mload(0xf00), f_q))
mstore(0xf40, mulmod(mload(0xf20), mload(0xf20), f_q))
mstore(0xf60, mulmod(mload(0xf40), mload(0xf40), f_q))
mstore(0xf80, mulmod(mload(0xf60), mload(0xf60), f_q))
mstore(0xfa0, mulmod(mload(0xf80), mload(0xf80), f_q))
mstore(0xfc0, mulmod(mload(0xfa0), mload(0xfa0), f_q))
mstore(0xfe0, mulmod(mload(0xfc0), mload(0xfc0), f_q))
mstore(0x1000, mulmod(mload(0xfe0), mload(0xfe0), f_q))
mstore(0x1020, mulmod(mload(0x1000), mload(0x1000), f_q))
mstore(0x1040, mulmod(mload(0x1020), mload(0x1020), f_q))
mstore(0x1060, mulmod(mload(0x1040), mload(0x1040), f_q))
mstore(0x1080, mulmod(mload(0x1060), mload(0x1060), f_q))
mstore(0x10a0, mulmod(mload(0x1080), mload(0x1080), f_q))
mstore(0x10c0, mulmod(mload(0x10a0), mload(0x10a0), f_q))
mstore(0x10e0, mulmod(mload(0x10c0), mload(0x10c0), f_q))
mstore(0x1100, mulmod(mload(0x10e0), mload(0x10e0), f_q))
mstore(0x1120, mulmod(mload(0x1100), mload(0x1100), f_q))
mstore(0x1140, mulmod(mload(0x1120), mload(0x1120), f_q))
mstore(0x1160, mulmod(mload(0x1140), mload(0x1140), f_q))
mstore(0x1180, mulmod(mload(0x1160), mload(0x1160), f_q))
mstore(0x11a0, addmod(mload(0x1180), 21888242871839275222246405745257275088548364400416034343698204186575808495616, f_q))
mstore(0x11c0, mulmod(mload(0x11a0), 21888241567198334088790460357988866238279339518792980768180410072331574733841, f_q))
mstore(0x11e0, mulmod(mload(0x11c0), 12929131318670223636853686797196826072950305380535537217467769528748593133487, f_q))
mstore(0x1200, addmod(mload(0x700), 8959111553169051585392718948060449015598059019880497126230434657827215362130, f_q))
mstore(0x1220, mulmod(mload(0x11c0), 14655294445420895451632927078981340937842238432098198055057679026789553137428, f_q))
mstore(0x1240, addmod(mload(0x700), 7232948426418379770613478666275934150706125968317836288640525159786255358189, f_q))
mstore(0x1260, mulmod(mload(0x11c0), 12220484078924208264862893648548198807365556694478604924193442790112568454894, f_q))
mstore(0x1280, addmod(mload(0x700), 9667758792915066957383512096709076281182807705937429419504761396463240040723, f_q))
mstore(0x12a0, mulmod(mload(0x11c0), 8734126352828345679573237859165904705806588461301144420590422589042130041188, f_q))
mstore(0x12c0, addmod(mload(0x700), 13154116519010929542673167886091370382741775939114889923107781597533678454429, f_q))
mstore(0x12e0, mulmod(mload(0x11c0), 7358966525675286471217089135633860168646304224547606326237275077574224349359, f_q))
mstore(0x1300, addmod(mload(0x700), 14529276346163988751029316609623414919902060175868428017460929109001584146258, f_q))
mstore(0x1320, mulmod(mload(0x11c0), 9741553891420464328295280489650144566903017206473301385034033384879943874347, f_q))
mstore(0x1340, addmod(mload(0x700), 12146688980418810893951125255607130521645347193942732958664170801695864621270, f_q))
mstore(0x1360, mulmod(mload(0x11c0), 17329448237240114492580865744088056414251735686965494637158808787419781175510, f_q))
mstore(0x1380, addmod(mload(0x700), 4558794634599160729665540001169218674296628713450539706539395399156027320107, f_q))
mstore(0x13a0, mulmod(mload(0x11c0), 1, f_q))
mstore(0x13c0, addmod(mload(0x700), 21888242871839275222246405745257275088548364400416034343698204186575808495616, f_q))
mstore(0x13e0, mulmod(mload(0x11c0), 11451405578697956743456240853980216273390554734748796433026540431386972584651, f_q))
mstore(0x1400, addmod(mload(0x700), 10436837293141318478790164891277058815157809665667237910671663755188835910966, f_q))
mstore(0x1420, mulmod(mload(0x11c0), 8374374965308410102411073611984011876711565317741801500439755773472076597347, f_q))
mstore(0x1440, addmod(mload(0x700), 13513867906530865119835332133273263211836799082674232843258448413103731898270, f_q))
mstore(0x1460, mulmod(mload(0x11c0), 21490807004895109926141140246143262403290679459142140821740925192625185504522, f_q))
mstore(0x1480, addmod(mload(0x700), 397435866944165296105265499114012685257684941273893521957278993950622991095, f_q))
mstore(0x14a0, mulmod(mload(0x11c0), 11211301017135681023579411905410872569206244553457844956874280139879520583390, f_q))
mstore(0x14c0, addmod(mload(0x700), 10676941854703594198666993839846402519342119846958189386823924046696287912227, f_q))
mstore(0x14e0, mulmod(mload(0x11c0), 18846108080730935585192484934247867403156699586319724728525857970312957475341, f_q))
mstore(0x1500, addmod(mload(0x700), 3042134791108339637053920811009407685391664814096309615172346216262851020276, f_q))
mstore(0x1520, mulmod(mload(0x11c0), 3615478808282855240548287271348143516886772452944084747768312988864436725401, f_q))
mstore(0x1540, addmod(mload(0x700), 18272764063556419981698118473909131571661591947471949595929891197711371770216, f_q))
mstore(0x1560, mulmod(mload(0x11c0), 21451937155080765789602997556105366785934335730087568134349216848800867145453, f_q))
mstore(0x1580, addmod(mload(0x700), 436305716758509432643408189151908302614028670328466209348987337774941350164, f_q))
mstore(0x15a0, mulmod(mload(0x11c0), 1426404432721484388505361748317961535523355871255605456897797744433766488507, f_q))
mstore(0x15c0, addmod(mload(0x700), 20461838439117790833741043996939313553025008529160428886800406442142042007110, f_q))
mstore(0x15e0, mulmod(mload(0x11c0), 13982290267294411190096162596630216412723378687553046594730793425118513274800, f_q))
mstore(0x1600, addmod(mload(0x700), 7905952604544864032150243148627058675824985712862987748967410761457295220817, f_q))
mstore(0x1620, mulmod(mload(0x11c0), 216092043779272773661818549620449970334216366264741118684015851799902419467, f_q))
mstore(0x1640, addmod(mload(0x700), 21672150828060002448584587195636825118214148034151293225014188334775906076150, f_q))
mstore(0x1660, mulmod(mload(0x11c0), 9537783784440837896026284659246718978615447564543116209283382057778110278482, f_q))
mstore(0x1680, addmod(mload(0x700), 12350459087398437326220121086010556109932916835872918134414822128797698217135, f_q))
mstore(0x16a0, mulmod(mload(0x11c0), 12619617507853212586156872920672483948819476989779550311307282715684870266992, f_q))
mstore(0x16c0, addmod(mload(0x700), 9268625363986062636089532824584791139728887410636484032390921470890938228625, f_q))
mstore(0x16e0, mulmod(mload(0x11c0), 3947443723575973965644279767310964219908423994086470065513888332899718123222, f_q))
mstore(0x1700, addmod(mload(0x700), 17940799148263301256602125977946310868639940406329564278184315853676090372395, f_q))
{
            let prod := mload(0x1200)

                prod := mulmod(mload(0x1240), prod, f_q)
                mstore(0x1720, prod)
            
                prod := mulmod(mload(0x1280), prod, f_q)
                mstore(0x1740, prod)
            
                prod := mulmod(mload(0x12c0), prod, f_q)
                mstore(0x1760, prod)
            
                prod := mulmod(mload(0x1300), prod, f_q)
                mstore(0x1780, prod)
            
                prod := mulmod(mload(0x1340), prod, f_q)
                mstore(0x17a0, prod)
            
                prod := mulmod(mload(0x1380), prod, f_q)
                mstore(0x17c0, prod)
            
                prod := mulmod(mload(0x13c0), prod, f_q)
                mstore(0x17e0, prod)
            
                prod := mulmod(mload(0x1400), prod, f_q)
                mstore(0x1800, prod)
            
                prod := mulmod(mload(0x1440), prod, f_q)
                mstore(0x1820, prod)
            
                prod := mulmod(mload(0x1480), prod, f_q)
                mstore(0x1840, prod)
            
                prod := mulmod(mload(0x14c0), prod, f_q)
                mstore(0x1860, prod)
            
                prod := mulmod(mload(0x1500), prod, f_q)
                mstore(0x1880, prod)
            
                prod := mulmod(mload(0x1540), prod, f_q)
                mstore(0x18a0, prod)
            
                prod := mulmod(mload(0x1580), prod, f_q)
                mstore(0x18c0, prod)
            
                prod := mulmod(mload(0x15c0), prod, f_q)
                mstore(0x18e0, prod)
            
                prod := mulmod(mload(0x1600), prod, f_q)
                mstore(0x1900, prod)
            
                prod := mulmod(mload(0x1640), prod, f_q)
                mstore(0x1920, prod)
            
                prod := mulmod(mload(0x1680), prod, f_q)
                mstore(0x1940, prod)
            
                prod := mulmod(mload(0x16c0), prod, f_q)
                mstore(0x1960, prod)
            
                prod := mulmod(mload(0x1700), prod, f_q)
                mstore(0x1980, prod)
            
                prod := mulmod(mload(0x11a0), prod, f_q)
                mstore(0x19a0, prod)
            
        }
mstore(0x19e0, 32)
mstore(0x1a00, 32)
mstore(0x1a20, 32)
mstore(0x1a40, mload(0x19a0))
mstore(0x1a60, 21888242871839275222246405745257275088548364400416034343698204186575808495615)
mstore(0x1a80, 21888242871839275222246405745257275088548364400416034343698204186575808495617)
success := and(eq(staticcall(gas(), 0x5, 0x19e0, 0xc0, 0x19c0, 0x20), 1), success)
{
            
            let inv := mload(0x19c0)
            let v
        
                    v := mload(0x11a0)
                    mstore(4512, mulmod(mload(0x1980), inv, f_q))
                    inv := mulmod(v, inv, f_q)
                
                    v := mload(0x1700)
                    mstore(5888, mulmod(mload(0x1960), inv, f_q))
                    inv := mulmod(v, inv, f_q)
                
                    v := mload(0x16c0)
                    mstore(5824, mulmod(mload(0x1940), inv, f_q))
                    inv := mulmod(v, inv, f_q)
                
                    v := mload(0x1680)
                    mstore(5760, mulmod(mload(0x1920), inv, f_q))
                    inv := mulmod(v, inv, f_q)
                
                    v := mload(0x1640)
                    mstore(5696, mulmod(mload(0x1900), inv, f_q))
                    inv := mulmod(v, inv, f_q)
                
                    v := mload(0x1600)
                    mstore(5632, mulmod(mload(0x18e0), inv, f_q))
                    inv := mulmod(v, inv, f_q)
                
                    v := mload(0x15c0)
                    mstore(5568, mulmod(mload(0x18c0), inv, f_q))
                    inv := mulmod(v, inv, f_q)
                
                    v := mload(0x1580)
                    mstore(5504, mulmod(mload(0x18a0), inv, f_q))
                    inv := mulmod(v, inv, f_q)
                
                    v := mload(0x1540)
                    mstore(5440, mulmod(mload(0x1880), inv, f_q))
                    inv := mulmod(v, inv, f_q)
                
                    v := mload(0x1500)
                    mstore(5376, mulmod(mload(0x1860), inv, f_q))
                    inv := mulmod(v, inv, f_q)
                
                    v := mload(0x14c0)
                    mstore(5312, mulmod(mload(0x1840), inv, f_q))
                    inv := mulmod(v, inv, f_q)
                
                    v := mload(0x1480)
                    mstore(5248, mulmod(mload(0x1820), inv, f_q))
                    inv := mulmod(v, inv, f_q)
                
                    v := mload(0x1440)
                    mstore(5184, mulmod(mload(0x1800), inv, f_q))
                    inv := mulmod(v, inv, f_q)
                
                    v := mload(0x1400)
                    mstore(5120, mulmod(mload(0x17e0), inv, f_q))
                    inv := mulmod(v, inv, f_q)
                
                    v := mload(0x13c0)
                    mstore(5056, mulmod(mload(0x17c0), inv, f_q))
                    inv := mulmod(v, inv, f_q)
                
                    v := mload(0x1380)
                    mstore(4992, mulmod(mload(0x17a0), inv, f_q))
                    inv := mulmod(v, inv, f_q)
                
                    v := mload(0x1340)
                    mstore(4928, mulmod(mload(0x1780), inv, f_q))
                    inv := mulmod(v, inv, f_q)
                
                    v := mload(0x1300)
                    mstore(4864, mulmod(mload(0x1760), inv, f_q))
                    inv := mulmod(v, inv, f_q)
                
                    v := mload(0x12c0)
                    mstore(4800, mulmod(mload(0x1740), inv, f_q))
                    inv := mulmod(v, inv, f_q)
                
                    v := mload(0x1280)
                    mstore(4736, mulmod(mload(0x1720), inv, f_q))
                    inv := mulmod(v, inv, f_q)
                
                    v := mload(0x1240)
                    mstore(4672, mulmod(mload(0x1200), inv, f_q))
                    inv := mulmod(v, inv, f_q)
                mstore(0x1200, inv)

        }
mstore(0x1aa0, mulmod(mload(0x11e0), mload(0x1200), f_q))
mstore(0x1ac0, mulmod(mload(0x1220), mload(0x1240), f_q))
mstore(0x1ae0, mulmod(mload(0x1260), mload(0x1280), f_q))
mstore(0x1b00, mulmod(mload(0x12a0), mload(0x12c0), f_q))
mstore(0x1b20, mulmod(mload(0x12e0), mload(0x1300), f_q))
mstore(0x1b40, mulmod(mload(0x1320), mload(0x1340), f_q))
mstore(0x1b60, mulmod(mload(0x1360), mload(0x1380), f_q))
mstore(0x1b80, mulmod(mload(0x13a0), mload(0x13c0), f_q))
mstore(0x1ba0, mulmod(mload(0x13e0), mload(0x1400), f_q))
mstore(0x1bc0, mulmod(mload(0x1420), mload(0x1440), f_q))
mstore(0x1be0, mulmod(mload(0x1460), mload(0x1480), f_q))
mstore(0x1c00, mulmod(mload(0x14a0), mload(0x14c0), f_q))
mstore(0x1c20, mulmod(mload(0x14e0), mload(0x1500), f_q))
mstore(0x1c40, mulmod(mload(0x1520), mload(0x1540), f_q))
mstore(0x1c60, mulmod(mload(0x1560), mload(0x1580), f_q))
mstore(0x1c80, mulmod(mload(0x15a0), mload(0x15c0), f_q))
mstore(0x1ca0, mulmod(mload(0x15e0), mload(0x1600), f_q))
mstore(0x1cc0, mulmod(mload(0x1620), mload(0x1640), f_q))
mstore(0x1ce0, mulmod(mload(0x1660), mload(0x1680), f_q))
mstore(0x1d00, mulmod(mload(0x16a0), mload(0x16c0), f_q))
mstore(0x1d20, mulmod(mload(0x16e0), mload(0x1700), f_q))
{
            let result := mulmod(mload(0x1b80), mload(0x20), f_q)
result := addmod(mulmod(mload(0x1ba0), mload(0x40), f_q), result, f_q)
result := addmod(mulmod(mload(0x1bc0), mload(0x60), f_q), result, f_q)
result := addmod(mulmod(mload(0x1be0), mload(0x80), f_q), result, f_q)
result := addmod(mulmod(mload(0x1c00), mload(0xa0), f_q), result, f_q)
result := addmod(mulmod(mload(0x1c20), mload(0xc0), f_q), result, f_q)
result := addmod(mulmod(mload(0x1c40), mload(0xe0), f_q), result, f_q)
result := addmod(mulmod(mload(0x1c60), mload(0x100), f_q), result, f_q)
result := addmod(mulmod(mload(0x1c80), mload(0x120), f_q), result, f_q)
result := addmod(mulmod(mload(0x1ca0), mload(0x140), f_q), result, f_q)
result := addmod(mulmod(mload(0x1cc0), mload(0x160), f_q), result, f_q)
result := addmod(mulmod(mload(0x1ce0), mload(0x180), f_q), result, f_q)
result := addmod(mulmod(mload(0x1d00), mload(0x1a0), f_q), result, f_q)
result := addmod(mulmod(mload(0x1d20), mload(0x1c0), f_q), result, f_q)
mstore(7488, result)
        }
mstore(0x1d60, addmod(2, sub(f_q, mload(0x920)), f_q))
mstore(0x1d80, mulmod(mload(0x1d60), mload(0x920), f_q))
mstore(0x1da0, mulmod(mload(0x780), mload(0x760), f_q))
mstore(0x1dc0, addmod(mload(0x740), mload(0x1da0), f_q))
mstore(0x1de0, addmod(mload(0x1dc0), sub(f_q, mload(0x7a0)), f_q))
mstore(0x1e00, mulmod(mload(0x1de0), mload(0x1d80), f_q))
mstore(0x1e20, mulmod(mload(0x5e0), mload(0x1e00), f_q))
mstore(0x1e40, mulmod(mload(0x800), mload(0x7e0), f_q))
mstore(0x1e60, addmod(mload(0x7c0), mload(0x1e40), f_q))
mstore(0x1e80, addmod(mload(0x1e60), sub(f_q, mload(0x820)), f_q))
mstore(0x1ea0, mulmod(mload(0x1e80), mload(0x940), f_q))
mstore(0x1ec0, addmod(mload(0x1e20), mload(0x1ea0), f_q))
mstore(0x1ee0, mulmod(mload(0x5e0), mload(0x1ec0), f_q))
mstore(0x1f00, addmod(1, sub(f_q, mload(0x920)), f_q))
mstore(0x1f20, mulmod(mload(0x1f00), mload(0x920), f_q))
mstore(0x1f40, mulmod(mload(0x880), mload(0x860), f_q))
mstore(0x1f60, addmod(mload(0x840), mload(0x1f40), f_q))
mstore(0x1f80, addmod(mload(0x1f60), sub(f_q, mload(0x8a0)), f_q))
mstore(0x1fa0, mulmod(mload(0x1f80), mload(0x1f20), f_q))
mstore(0x1fc0, addmod(mload(0x1ee0), mload(0x1fa0), f_q))
mstore(0x1fe0, mulmod(mload(0x5e0), mload(0x1fc0), f_q))
mstore(0x2000, addmod(1, sub(f_q, mload(0xa40)), f_q))
mstore(0x2020, mulmod(mload(0x2000), mload(0x1b80), f_q))
mstore(0x2040, addmod(mload(0x1fe0), mload(0x2020), f_q))
mstore(0x2060, mulmod(mload(0x5e0), mload(0x2040), f_q))
mstore(0x2080, mulmod(mload(0xb00), mload(0xb00), f_q))
mstore(0x20a0, addmod(mload(0x2080), sub(f_q, mload(0xb00)), f_q))
mstore(0x20c0, mulmod(mload(0x20a0), mload(0x1aa0), f_q))
mstore(0x20e0, addmod(mload(0x2060), mload(0x20c0), f_q))
mstore(0x2100, mulmod(mload(0x5e0), mload(0x20e0), f_q))
mstore(0x2120, addmod(mload(0xaa0), sub(f_q, mload(0xa80)), f_q))
mstore(0x2140, mulmod(mload(0x2120), mload(0x1b80), f_q))
mstore(0x2160, addmod(mload(0x2100), mload(0x2140), f_q))
mstore(0x2180, mulmod(mload(0x5e0), mload(0x2160), f_q))
mstore(0x21a0, addmod(mload(0xb00), sub(f_q, mload(0xae0)), f_q))
mstore(0x21c0, mulmod(mload(0x21a0), mload(0x1b80), f_q))
mstore(0x21e0, addmod(mload(0x2180), mload(0x21c0), f_q))
mstore(0x2200, mulmod(mload(0x5e0), mload(0x21e0), f_q))
mstore(0x2220, addmod(1, sub(f_q, mload(0x1aa0)), f_q))
mstore(0x2240, addmod(mload(0x1ac0), mload(0x1ae0), f_q))
mstore(0x2260, addmod(mload(0x2240), mload(0x1b00), f_q))
mstore(0x2280, addmod(mload(0x2260), mload(0x1b20), f_q))
mstore(0x22a0, addmod(mload(0x2280), mload(0x1b40), f_q))
mstore(0x22c0, addmod(mload(0x22a0), mload(0x1b60), f_q))
mstore(0x22e0, addmod(mload(0x2220), sub(f_q, mload(0x22c0)), f_q))
mstore(0x2300, mulmod(mload(0x980), mload(0x3e0), f_q))
mstore(0x2320, addmod(mload(0x8e0), mload(0x2300), f_q))
mstore(0x2340, addmod(mload(0x2320), mload(0x440), f_q))
mstore(0x2360, mulmod(mload(0x9a0), mload(0x3e0), f_q))
mstore(0x2380, addmod(mload(0x740), mload(0x2360), f_q))
mstore(0x23a0, addmod(mload(0x2380), mload(0x440), f_q))
mstore(0x23c0, mulmod(mload(0x23a0), mload(0x2340), f_q))
mstore(0x23e0, mulmod(mload(0x23c0), mload(0xa60), f_q))
mstore(0x2400, mulmod(1, mload(0x3e0), f_q))
mstore(0x2420, mulmod(mload(0x700), mload(0x2400), f_q))
mstore(0x2440, addmod(mload(0x8e0), mload(0x2420), f_q))
mstore(0x2460, addmod(mload(0x2440), mload(0x440), f_q))
mstore(0x2480, mulmod(4131629893567559867359510883348571134090853742863529169391034518566172092834, mload(0x3e0), f_q))
mstore(0x24a0, mulmod(mload(0x700), mload(0x2480), f_q))
mstore(0x24c0, addmod(mload(0x740), mload(0x24a0), f_q))
mstore(0x24e0, addmod(mload(0x24c0), mload(0x440), f_q))
mstore(0x2500, mulmod(mload(0x24e0), mload(0x2460), f_q))
mstore(0x2520, mulmod(mload(0x2500), mload(0xa40), f_q))
mstore(0x2540, addmod(mload(0x23e0), sub(f_q, mload(0x2520)), f_q))
mstore(0x2560, mulmod(mload(0x2540), mload(0x22e0), f_q))
mstore(0x2580, addmod(mload(0x2200), mload(0x2560), f_q))
mstore(0x25a0, mulmod(mload(0x5e0), mload(0x2580), f_q))
mstore(0x25c0, mulmod(mload(0x9c0), mload(0x3e0), f_q))
mstore(0x25e0, addmod(mload(0x7c0), mload(0x25c0), f_q))
mstore(0x2600, addmod(mload(0x25e0), mload(0x440), f_q))
mstore(0x2620, mulmod(mload(0x9e0), mload(0x3e0), f_q))
mstore(0x2640, addmod(mload(0x840), mload(0x2620), f_q))
mstore(0x2660, addmod(mload(0x2640), mload(0x440), f_q))
mstore(0x2680, mulmod(mload(0x2660), mload(0x2600), f_q))
mstore(0x26a0, mulmod(mload(0x2680), mload(0xac0), f_q))
mstore(0x26c0, mulmod(8910878055287538404433155982483128285667088683464058436815641868457422632747, mload(0x3e0), f_q))
mstore(0x26e0, mulmod(mload(0x700), mload(0x26c0), f_q))
mstore(0x2700, addmod(mload(0x7c0), mload(0x26e0), f_q))
mstore(0x2720, addmod(mload(0x2700), mload(0x440), f_q))
mstore(0x2740, mulmod(11166246659983828508719468090013646171463329086121580628794302409516816350802, mload(0x3e0), f_q))
mstore(0x2760, mulmod(mload(0x700), mload(0x2740), f_q))
mstore(0x2780, addmod(mload(0x840), mload(0x2760), f_q))
mstore(0x27a0, addmod(mload(0x2780), mload(0x440), f_q))
mstore(0x27c0, mulmod(mload(0x27a0), mload(0x2720), f_q))
mstore(0x27e0, mulmod(mload(0x27c0), mload(0xaa0), f_q))
mstore(0x2800, addmod(mload(0x26a0), sub(f_q, mload(0x27e0)), f_q))
mstore(0x2820, mulmod(mload(0x2800), mload(0x22e0), f_q))
mstore(0x2840, addmod(mload(0x25a0), mload(0x2820), f_q))
mstore(0x2860, mulmod(mload(0x5e0), mload(0x2840), f_q))
mstore(0x2880, mulmod(mload(0xa00), mload(0x3e0), f_q))
mstore(0x28a0, addmod(mload(0x8c0), mload(0x2880), f_q))
mstore(0x28c0, addmod(mload(0x28a0), mload(0x440), f_q))
mstore(0x28e0, mulmod(mload(0xa20), mload(0x3e0), f_q))
mstore(0x2900, addmod(mload(0x1d40), mload(0x28e0), f_q))
mstore(0x2920, addmod(mload(0x2900), mload(0x440), f_q))
mstore(0x2940, mulmod(mload(0x2920), mload(0x28c0), f_q))
mstore(0x2960, mulmod(mload(0x2940), mload(0xb20), f_q))
mstore(0x2980, mulmod(284840088355319032285349970403338060113257071685626700086398481893096618818, mload(0x3e0), f_q))
mstore(0x29a0, mulmod(mload(0x700), mload(0x2980), f_q))
mstore(0x29c0, addmod(mload(0x8c0), mload(0x29a0), f_q))
mstore(0x29e0, addmod(mload(0x29c0), mload(0x440), f_q))
mstore(0x2a00, mulmod(21134065618345176623193549882539580312263652408302468683943992798037078993309, mload(0x3e0), f_q))
mstore(0x2a20, mulmod(mload(0x700), mload(0x2a00), f_q))
mstore(0x2a40, addmod(mload(0x1d40), mload(0x2a20), f_q))
mstore(0x2a60, addmod(mload(0x2a40), mload(0x440), f_q))
mstore(0x2a80, mulmod(mload(0x2a60), mload(0x29e0), f_q))
mstore(0x2aa0, mulmod(mload(0x2a80), mload(0xb00), f_q))
mstore(0x2ac0, addmod(mload(0x2960), sub(f_q, mload(0x2aa0)), f_q))
mstore(0x2ae0, mulmod(mload(0x2ac0), mload(0x22e0), f_q))
mstore(0x2b00, addmod(mload(0x2860), mload(0x2ae0), f_q))
mstore(0x2b20, mulmod(mload(0x5e0), mload(0x2b00), f_q))
mstore(0x2b40, addmod(1, sub(f_q, mload(0xb40)), f_q))
mstore(0x2b60, mulmod(mload(0x2b40), mload(0x1b80), f_q))
mstore(0x2b80, addmod(mload(0x2b20), mload(0x2b60), f_q))
mstore(0x2ba0, mulmod(mload(0x5e0), mload(0x2b80), f_q))
mstore(0x2bc0, mulmod(mload(0xb40), mload(0xb40), f_q))
mstore(0x2be0, addmod(mload(0x2bc0), sub(f_q, mload(0xb40)), f_q))
mstore(0x2c00, mulmod(mload(0x2be0), mload(0x1aa0), f_q))
mstore(0x2c20, addmod(mload(0x2ba0), mload(0x2c00), f_q))
mstore(0x2c40, mulmod(mload(0x5e0), mload(0x2c20), f_q))
mstore(0x2c60, addmod(mload(0xb80), mload(0x3e0), f_q))
mstore(0x2c80, mulmod(mload(0x2c60), mload(0xb60), f_q))
mstore(0x2ca0, addmod(mload(0xbc0), mload(0x440), f_q))
mstore(0x2cc0, mulmod(mload(0x2ca0), mload(0x2c80), f_q))
mstore(0x2ce0, addmod(mload(0x8c0), mload(0x3e0), f_q))
mstore(0x2d00, mulmod(mload(0x2ce0), mload(0xb40), f_q))
mstore(0x2d20, addmod(mload(0x900), mload(0x440), f_q))
mstore(0x2d40, mulmod(mload(0x2d20), mload(0x2d00), f_q))
mstore(0x2d60, addmod(mload(0x2cc0), sub(f_q, mload(0x2d40)), f_q))
mstore(0x2d80, mulmod(mload(0x2d60), mload(0x22e0), f_q))
mstore(0x2da0, addmod(mload(0x2c40), mload(0x2d80), f_q))
mstore(0x2dc0, mulmod(mload(0x5e0), mload(0x2da0), f_q))
mstore(0x2de0, addmod(mload(0xb80), sub(f_q, mload(0xbc0)), f_q))
mstore(0x2e00, mulmod(mload(0x2de0), mload(0x1b80), f_q))
mstore(0x2e20, addmod(mload(0x2dc0), mload(0x2e00), f_q))
mstore(0x2e40, mulmod(mload(0x5e0), mload(0x2e20), f_q))
mstore(0x2e60, mulmod(mload(0x2de0), mload(0x22e0), f_q))
mstore(0x2e80, addmod(mload(0xb80), sub(f_q, mload(0xba0)), f_q))
mstore(0x2ea0, mulmod(mload(0x2e80), mload(0x2e60), f_q))
mstore(0x2ec0, addmod(mload(0x2e40), mload(0x2ea0), f_q))
mstore(0x2ee0, mulmod(mload(0x1180), mload(0x1180), f_q))
mstore(0x2f00, mulmod(mload(0x2ee0), mload(0x1180), f_q))
mstore(0x2f20, mulmod(1, mload(0x1180), f_q))
mstore(0x2f40, mulmod(1, mload(0x2ee0), f_q))
mstore(0x2f60, mulmod(mload(0x2ec0), mload(0x11a0), f_q))
mstore(0x2f80, mulmod(mload(0xde0), mload(0xde0), f_q))
mstore(0x2fa0, mulmod(mload(0x2f80), mload(0xde0), f_q))
mstore(0x2fc0, mulmod(mload(0x2fa0), mload(0xde0), f_q))
mstore(0x2fe0, mulmod(mload(0x2fc0), mload(0xde0), f_q))
mstore(0x3000, mulmod(mload(0x2fe0), mload(0xde0), f_q))
mstore(0x3020, mulmod(mload(0xc00), mload(0xc00), f_q))
mstore(0x3040, mulmod(mload(0x3020), mload(0xc00), f_q))
mstore(0x3060, mulmod(mload(0x3040), mload(0xc00), f_q))
mstore(0x3080, mulmod(mload(0x3060), mload(0xc00), f_q))
mstore(0x30a0, mulmod(mload(0x3080), mload(0xc00), f_q))
mstore(0x30c0, mulmod(mload(0x30a0), mload(0xc00), f_q))
mstore(0x30e0, mulmod(mload(0x30c0), mload(0xc00), f_q))
mstore(0x3100, mulmod(mload(0x30e0), mload(0xc00), f_q))
mstore(0x3120, mulmod(mload(0x3100), mload(0xc00), f_q))
mstore(0x3140, mulmod(mload(0x3120), mload(0xc00), f_q))
mstore(0x3160, mulmod(mload(0x3140), mload(0xc00), f_q))
mstore(0x3180, mulmod(mload(0x3160), mload(0xc00), f_q))
mstore(0x31a0, mulmod(mload(0x3180), mload(0xc00), f_q))
mstore(0x31c0, mulmod(mload(0x31a0), mload(0xc00), f_q))
mstore(0x31e0, mulmod(mload(0x31c0), mload(0xc00), f_q))
mstore(0x3200, mulmod(mload(0x31e0), mload(0xc00), f_q))
mstore(0x3220, mulmod(mload(0x3200), mload(0xc00), f_q))
mstore(0x3240, mulmod(mload(0x3220), mload(0xc00), f_q))
mstore(0x3260, mulmod(mload(0x3240), mload(0xc00), f_q))
mstore(0x3280, mulmod(mload(0x3260), mload(0xc00), f_q))
mstore(0x32a0, mulmod(mload(0x3280), mload(0xc00), f_q))
mstore(0x32c0, mulmod(sub(f_q, mload(0x740)), 1, f_q))
mstore(0x32e0, mulmod(sub(f_q, mload(0x7c0)), mload(0xc00), f_q))
mstore(0x3300, mulmod(1, mload(0xc00), f_q))
mstore(0x3320, addmod(mload(0x32c0), mload(0x32e0), f_q))
mstore(0x3340, mulmod(sub(f_q, mload(0x840)), mload(0x3020), f_q))
mstore(0x3360, mulmod(1, mload(0x3020), f_q))
mstore(0x3380, addmod(mload(0x3320), mload(0x3340), f_q))
mstore(0x33a0, mulmod(sub(f_q, mload(0x8c0)), mload(0x3040), f_q))
mstore(0x33c0, mulmod(1, mload(0x3040), f_q))
mstore(0x33e0, addmod(mload(0x3380), mload(0x33a0), f_q))
mstore(0x3400, mulmod(sub(f_q, mload(0xa40)), mload(0x3060), f_q))
mstore(0x3420, mulmod(1, mload(0x3060), f_q))
mstore(0x3440, addmod(mload(0x33e0), mload(0x3400), f_q))
mstore(0x3460, mulmod(sub(f_q, mload(0xaa0)), mload(0x3080), f_q))
mstore(0x3480, mulmod(1, mload(0x3080), f_q))
mstore(0x34a0, addmod(mload(0x3440), mload(0x3460), f_q))
mstore(0x34c0, mulmod(sub(f_q, mload(0xb00)), mload(0x30a0), f_q))
mstore(0x34e0, mulmod(1, mload(0x30a0), f_q))
mstore(0x3500, addmod(mload(0x34a0), mload(0x34c0), f_q))
mstore(0x3520, mulmod(sub(f_q, mload(0xb40)), mload(0x30c0), f_q))
mstore(0x3540, mulmod(1, mload(0x30c0), f_q))
mstore(0x3560, addmod(mload(0x3500), mload(0x3520), f_q))
mstore(0x3580, mulmod(sub(f_q, mload(0xb80)), mload(0x30e0), f_q))
mstore(0x35a0, mulmod(1, mload(0x30e0), f_q))
mstore(0x35c0, addmod(mload(0x3560), mload(0x3580), f_q))
mstore(0x35e0, mulmod(sub(f_q, mload(0xbc0)), mload(0x3100), f_q))
mstore(0x3600, mulmod(1, mload(0x3100), f_q))
mstore(0x3620, addmod(mload(0x35c0), mload(0x35e0), f_q))
mstore(0x3640, mulmod(sub(f_q, mload(0x8e0)), mload(0x3120), f_q))
mstore(0x3660, mulmod(1, mload(0x3120), f_q))
mstore(0x3680, addmod(mload(0x3620), mload(0x3640), f_q))
mstore(0x36a0, mulmod(sub(f_q, mload(0x900)), mload(0x3140), f_q))
mstore(0x36c0, mulmod(1, mload(0x3140), f_q))
mstore(0x36e0, addmod(mload(0x3680), mload(0x36a0), f_q))
mstore(0x3700, mulmod(sub(f_q, mload(0x920)), mload(0x3160), f_q))
mstore(0x3720, mulmod(1, mload(0x3160), f_q))
mstore(0x3740, addmod(mload(0x36e0), mload(0x3700), f_q))
mstore(0x3760, mulmod(sub(f_q, mload(0x940)), mload(0x3180), f_q))
mstore(0x3780, mulmod(1, mload(0x3180), f_q))
mstore(0x37a0, addmod(mload(0x3740), mload(0x3760), f_q))
mstore(0x37c0, mulmod(sub(f_q, mload(0x980)), mload(0x31a0), f_q))
mstore(0x37e0, mulmod(1, mload(0x31a0), f_q))
mstore(0x3800, addmod(mload(0x37a0), mload(0x37c0), f_q))
mstore(0x3820, mulmod(sub(f_q, mload(0x9a0)), mload(0x31c0), f_q))
mstore(0x3840, mulmod(1, mload(0x31c0), f_q))
mstore(0x3860, addmod(mload(0x3800), mload(0x3820), f_q))
mstore(0x3880, mulmod(sub(f_q, mload(0x9c0)), mload(0x31e0), f_q))
mstore(0x38a0, mulmod(1, mload(0x31e0), f_q))
mstore(0x38c0, addmod(mload(0x3860), mload(0x3880), f_q))
mstore(0x38e0, mulmod(sub(f_q, mload(0x9e0)), mload(0x3200), f_q))
mstore(0x3900, mulmod(1, mload(0x3200), f_q))
mstore(0x3920, addmod(mload(0x38c0), mload(0x38e0), f_q))
mstore(0x3940, mulmod(sub(f_q, mload(0xa00)), mload(0x3220), f_q))
mstore(0x3960, mulmod(1, mload(0x3220), f_q))
mstore(0x3980, addmod(mload(0x3920), mload(0x3940), f_q))
mstore(0x39a0, mulmod(sub(f_q, mload(0xa20)), mload(0x3240), f_q))
mstore(0x39c0, mulmod(1, mload(0x3240), f_q))
mstore(0x39e0, addmod(mload(0x3980), mload(0x39a0), f_q))
mstore(0x3a00, mulmod(sub(f_q, mload(0x2f60)), mload(0x3260), f_q))
mstore(0x3a20, mulmod(1, mload(0x3260), f_q))
mstore(0x3a40, mulmod(mload(0x2f20), mload(0x3260), f_q))
mstore(0x3a60, mulmod(mload(0x2f40), mload(0x3260), f_q))
mstore(0x3a80, addmod(mload(0x39e0), mload(0x3a00), f_q))
mstore(0x3aa0, mulmod(sub(f_q, mload(0x960)), mload(0x3280), f_q))
mstore(0x3ac0, mulmod(1, mload(0x3280), f_q))
mstore(0x3ae0, addmod(mload(0x3a80), mload(0x3aa0), f_q))
mstore(0x3b00, mulmod(mload(0x3ae0), 1, f_q))
mstore(0x3b20, mulmod(mload(0x3300), 1, f_q))
mstore(0x3b40, mulmod(mload(0x3360), 1, f_q))
mstore(0x3b60, mulmod(mload(0x33c0), 1, f_q))
mstore(0x3b80, mulmod(mload(0x3420), 1, f_q))
mstore(0x3ba0, mulmod(mload(0x3480), 1, f_q))
mstore(0x3bc0, mulmod(mload(0x34e0), 1, f_q))
mstore(0x3be0, mulmod(mload(0x3540), 1, f_q))
mstore(0x3c00, mulmod(mload(0x35a0), 1, f_q))
mstore(0x3c20, mulmod(mload(0x3600), 1, f_q))
mstore(0x3c40, mulmod(mload(0x3660), 1, f_q))
mstore(0x3c60, mulmod(mload(0x36c0), 1, f_q))
mstore(0x3c80, mulmod(mload(0x3720), 1, f_q))
mstore(0x3ca0, mulmod(mload(0x3780), 1, f_q))
mstore(0x3cc0, mulmod(mload(0x37e0), 1, f_q))
mstore(0x3ce0, mulmod(mload(0x3840), 1, f_q))
mstore(0x3d00, mulmod(mload(0x38a0), 1, f_q))
mstore(0x3d20, mulmod(mload(0x3900), 1, f_q))
mstore(0x3d40, mulmod(mload(0x3960), 1, f_q))
mstore(0x3d60, mulmod(mload(0x39c0), 1, f_q))
mstore(0x3d80, mulmod(mload(0x3a20), 1, f_q))
mstore(0x3da0, mulmod(mload(0x3a40), 1, f_q))
mstore(0x3dc0, mulmod(mload(0x3a60), 1, f_q))
mstore(0x3de0, mulmod(mload(0x3ac0), 1, f_q))
mstore(0x3e00, mulmod(sub(f_q, mload(0x760)), 1, f_q))
mstore(0x3e20, mulmod(sub(f_q, mload(0x7e0)), mload(0xc00), f_q))
mstore(0x3e40, addmod(mload(0x3e00), mload(0x3e20), f_q))
mstore(0x3e60, mulmod(sub(f_q, mload(0x860)), mload(0x3020), f_q))
mstore(0x3e80, addmod(mload(0x3e40), mload(0x3e60), f_q))
mstore(0x3ea0, mulmod(sub(f_q, mload(0xa60)), mload(0x3040), f_q))
mstore(0x3ec0, addmod(mload(0x3e80), mload(0x3ea0), f_q))
mstore(0x3ee0, mulmod(sub(f_q, mload(0xac0)), mload(0x3060), f_q))
mstore(0x3f00, addmod(mload(0x3ec0), mload(0x3ee0), f_q))
mstore(0x3f20, mulmod(sub(f_q, mload(0xb20)), mload(0x3080), f_q))
mstore(0x3f40, addmod(mload(0x3f00), mload(0x3f20), f_q))
mstore(0x3f60, mulmod(sub(f_q, mload(0xb60)), mload(0x30a0), f_q))
mstore(0x3f80, addmod(mload(0x3f40), mload(0x3f60), f_q))
mstore(0x3fa0, mulmod(mload(0x3f80), mload(0xde0), f_q))
mstore(0x3fc0, mulmod(1, mload(0xde0), f_q))
mstore(0x3fe0, mulmod(mload(0x3300), mload(0xde0), f_q))
mstore(0x4000, mulmod(mload(0x3360), mload(0xde0), f_q))
mstore(0x4020, mulmod(mload(0x33c0), mload(0xde0), f_q))
mstore(0x4040, mulmod(mload(0x3420), mload(0xde0), f_q))
mstore(0x4060, mulmod(mload(0x3480), mload(0xde0), f_q))
mstore(0x4080, mulmod(mload(0x34e0), mload(0xde0), f_q))
mstore(0x40a0, addmod(mload(0x3b00), mload(0x3fa0), f_q))
mstore(0x40c0, addmod(1, mload(0x3fc0), f_q))
mstore(0x40e0, addmod(mload(0x3b20), mload(0x3fe0), f_q))
mstore(0x4100, addmod(mload(0x3b40), mload(0x4000), f_q))
mstore(0x4120, addmod(mload(0x3b80), mload(0x4020), f_q))
mstore(0x4140, addmod(mload(0x3ba0), mload(0x4040), f_q))
mstore(0x4160, addmod(mload(0x3bc0), mload(0x4060), f_q))
mstore(0x4180, addmod(mload(0x3be0), mload(0x4080), f_q))
mstore(0x41a0, mulmod(sub(f_q, mload(0x780)), 1, f_q))
mstore(0x41c0, mulmod(sub(f_q, mload(0x800)), mload(0xc00), f_q))
mstore(0x41e0, addmod(mload(0x41a0), mload(0x41c0), f_q))
mstore(0x4200, mulmod(sub(f_q, mload(0x880)), mload(0x3020), f_q))
mstore(0x4220, addmod(mload(0x41e0), mload(0x4200), f_q))
mstore(0x4240, mulmod(mload(0x4220), mload(0x2f80), f_q))
mstore(0x4260, mulmod(1, mload(0x2f80), f_q))
mstore(0x4280, mulmod(mload(0x3300), mload(0x2f80), f_q))
mstore(0x42a0, mulmod(mload(0x3360), mload(0x2f80), f_q))
mstore(0x42c0, addmod(mload(0x40a0), mload(0x4240), f_q))
mstore(0x42e0, addmod(mload(0x40c0), mload(0x4260), f_q))
mstore(0x4300, addmod(mload(0x40e0), mload(0x4280), f_q))
mstore(0x4320, addmod(mload(0x4100), mload(0x42a0), f_q))
mstore(0x4340, mulmod(sub(f_q, mload(0x7a0)), 1, f_q))
mstore(0x4360, mulmod(sub(f_q, mload(0x820)), mload(0xc00), f_q))
mstore(0x4380, addmod(mload(0x4340), mload(0x4360), f_q))
mstore(0x43a0, mulmod(sub(f_q, mload(0x8a0)), mload(0x3020), f_q))
mstore(0x43c0, addmod(mload(0x4380), mload(0x43a0), f_q))
mstore(0x43e0, mulmod(mload(0x43c0), mload(0x2fa0), f_q))
mstore(0x4400, mulmod(1, mload(0x2fa0), f_q))
mstore(0x4420, mulmod(mload(0x3300), mload(0x2fa0), f_q))
mstore(0x4440, mulmod(mload(0x3360), mload(0x2fa0), f_q))
mstore(0x4460, addmod(mload(0x42c0), mload(0x43e0), f_q))
mstore(0x4480, addmod(mload(0x42e0), mload(0x4400), f_q))
mstore(0x44a0, addmod(mload(0x4300), mload(0x4420), f_q))
mstore(0x44c0, addmod(mload(0x4320), mload(0x4440), f_q))
mstore(0x44e0, mulmod(sub(f_q, mload(0xae0)), 1, f_q))
mstore(0x4500, mulmod(sub(f_q, mload(0xa80)), mload(0xc00), f_q))
mstore(0x4520, addmod(mload(0x44e0), mload(0x4500), f_q))
mstore(0x4540, mulmod(mload(0x4520), mload(0x2fc0), f_q))
mstore(0x4560, mulmod(1, mload(0x2fc0), f_q))
mstore(0x4580, mulmod(mload(0x3300), mload(0x2fc0), f_q))
mstore(0x45a0, addmod(mload(0x4460), mload(0x4540), f_q))
mstore(0x45c0, addmod(mload(0x4140), mload(0x4560), f_q))
mstore(0x45e0, addmod(mload(0x4120), mload(0x4580), f_q))
mstore(0x4600, mulmod(sub(f_q, mload(0xba0)), 1, f_q))
mstore(0x4620, mulmod(mload(0x4600), mload(0x2fe0), f_q))
mstore(0x4640, mulmod(1, mload(0x2fe0), f_q))
mstore(0x4660, addmod(mload(0x45a0), mload(0x4620), f_q))
mstore(0x4680, addmod(mload(0x3c00), mload(0x4640), f_q))
mstore(0x46a0, mulmod(1, mload(0x700), f_q))
mstore(0x46c0, mulmod(1, mload(0x46a0), f_q))
mstore(0x46e0, mulmod(11451405578697956743456240853980216273390554734748796433026540431386972584651, mload(0x700), f_q))
mstore(0x4700, mulmod(mload(0x3fc0), mload(0x46e0), f_q))
mstore(0x4720, mulmod(8374374965308410102411073611984011876711565317741801500439755773472076597347, mload(0x700), f_q))
mstore(0x4740, mulmod(mload(0x4260), mload(0x4720), f_q))
mstore(0x4760, mulmod(21490807004895109926141140246143262403290679459142140821740925192625185504522, mload(0x700), f_q))
mstore(0x4780, mulmod(mload(0x4400), mload(0x4760), f_q))
mstore(0x47a0, mulmod(12929131318670223636853686797196826072950305380535537217467769528748593133487, mload(0x700), f_q))
mstore(0x47c0, mulmod(mload(0x4560), mload(0x47a0), f_q))
mstore(0x47e0, mulmod(17329448237240114492580865744088056414251735686965494637158808787419781175510, mload(0x700), f_q))
mstore(0x4800, mulmod(mload(0x4640), mload(0x47e0), f_q))
mstore(0x4820, 0x0000000000000000000000000000000000000000000000000000000000000001)
                    mstore(0x4840, 0x0000000000000000000000000000000000000000000000000000000000000002)
mstore(0x4860, mload(0x4660))
success := and(eq(staticcall(gas(), 0x7, 0x4820, 0x60, 0x4820, 0x40), 1), success)
mstore(0x4880, mload(0x1e0))
                    mstore(0x48a0, mload(0x200))
mstore(0x48c0, mload(0x4480))
success := and(eq(staticcall(gas(), 0x7, 0x4880, 0x60, 0x4880, 0x40), 1), success)
mstore(0x48e0, mload(0x4820))
                    mstore(0x4900, mload(0x4840))
mstore(0x4920, mload(0x4880))
                    mstore(0x4940, mload(0x48a0))
success := and(eq(staticcall(gas(), 0x6, 0x48e0, 0x80, 0x48e0, 0x40), 1), success)
mstore(0x4960, mload(0x220))
                    mstore(0x4980, mload(0x240))
mstore(0x49a0, mload(0x44a0))
success := and(eq(staticcall(gas(), 0x7, 0x4960, 0x60, 0x4960, 0x40), 1), success)
mstore(0x49c0, mload(0x48e0))
                    mstore(0x49e0, mload(0x4900))
mstore(0x4a00, mload(0x4960))
                    mstore(0x4a20, mload(0x4980))
success := and(eq(staticcall(gas(), 0x6, 0x49c0, 0x80, 0x49c0, 0x40), 1), success)
mstore(0x4a40, mload(0x260))
                    mstore(0x4a60, mload(0x280))
mstore(0x4a80, mload(0x44c0))
success := and(eq(staticcall(gas(), 0x7, 0x4a40, 0x60, 0x4a40, 0x40), 1), success)
mstore(0x4aa0, mload(0x49c0))
                    mstore(0x4ac0, mload(0x49e0))
mstore(0x4ae0, mload(0x4a40))
                    mstore(0x4b00, mload(0x4a60))
success := and(eq(staticcall(gas(), 0x6, 0x4aa0, 0x80, 0x4aa0, 0x40), 1), success)
mstore(0x4b20, mload(0x2a0))
                    mstore(0x4b40, mload(0x2c0))
mstore(0x4b60, mload(0x3b60))
success := and(eq(staticcall(gas(), 0x7, 0x4b20, 0x60, 0x4b20, 0x40), 1), success)
mstore(0x4b80, mload(0x4aa0))
                    mstore(0x4ba0, mload(0x4ac0))
mstore(0x4bc0, mload(0x4b20))
                    mstore(0x4be0, mload(0x4b40))
success := and(eq(staticcall(gas(), 0x6, 0x4b80, 0x80, 0x4b80, 0x40), 1), success)
mstore(0x4c00, mload(0x480))
                    mstore(0x4c20, mload(0x4a0))
mstore(0x4c40, mload(0x45e0))
success := and(eq(staticcall(gas(), 0x7, 0x4c00, 0x60, 0x4c00, 0x40), 1), success)
mstore(0x4c60, mload(0x4b80))
                    mstore(0x4c80, mload(0x4ba0))
mstore(0x4ca0, mload(0x4c00))
                    mstore(0x4cc0, mload(0x4c20))
success := and(eq(staticcall(gas(), 0x6, 0x4c60, 0x80, 0x4c60, 0x40), 1), success)
mstore(0x4ce0, mload(0x4c0))
                    mstore(0x4d00, mload(0x4e0))
mstore(0x4d20, mload(0x45c0))
success := and(eq(staticcall(gas(), 0x7, 0x4ce0, 0x60, 0x4ce0, 0x40), 1), success)
mstore(0x4d40, mload(0x4c60))
                    mstore(0x4d60, mload(0x4c80))
mstore(0x4d80, mload(0x4ce0))
                    mstore(0x4da0, mload(0x4d00))
success := and(eq(staticcall(gas(), 0x6, 0x4d40, 0x80, 0x4d40, 0x40), 1), success)
mstore(0x4dc0, mload(0x500))
                    mstore(0x4de0, mload(0x520))
mstore(0x4e00, mload(0x4160))
success := and(eq(staticcall(gas(), 0x7, 0x4dc0, 0x60, 0x4dc0, 0x40), 1), success)
mstore(0x4e20, mload(0x4d40))
                    mstore(0x4e40, mload(0x4d60))
mstore(0x4e60, mload(0x4dc0))
                    mstore(0x4e80, mload(0x4de0))
success := and(eq(staticcall(gas(), 0x6, 0x4e20, 0x80, 0x4e20, 0x40), 1), success)
mstore(0x4ea0, mload(0x540))
                    mstore(0x4ec0, mload(0x560))
mstore(0x4ee0, mload(0x4180))
success := and(eq(staticcall(gas(), 0x7, 0x4ea0, 0x60, 0x4ea0, 0x40), 1), success)
mstore(0x4f00, mload(0x4e20))
                    mstore(0x4f20, mload(0x4e40))
mstore(0x4f40, mload(0x4ea0))
                    mstore(0x4f60, mload(0x4ec0))
success := and(eq(staticcall(gas(), 0x6, 0x4f00, 0x80, 0x4f00, 0x40), 1), success)
mstore(0x4f80, mload(0x340))
                    mstore(0x4fa0, mload(0x360))
mstore(0x4fc0, mload(0x4680))
success := and(eq(staticcall(gas(), 0x7, 0x4f80, 0x60, 0x4f80, 0x40), 1), success)
mstore(0x4fe0, mload(0x4f00))
                    mstore(0x5000, mload(0x4f20))
mstore(0x5020, mload(0x4f80))
                    mstore(0x5040, mload(0x4fa0))
success := and(eq(staticcall(gas(), 0x6, 0x4fe0, 0x80, 0x4fe0, 0x40), 1), success)
mstore(0x5060, mload(0x380))
                    mstore(0x5080, mload(0x3a0))
mstore(0x50a0, mload(0x3c20))
success := and(eq(staticcall(gas(), 0x7, 0x5060, 0x60, 0x5060, 0x40), 1), success)
mstore(0x50c0, mload(0x4fe0))
                    mstore(0x50e0, mload(0x5000))
mstore(0x5100, mload(0x5060))
                    mstore(0x5120, mload(0x5080))
success := and(eq(staticcall(gas(), 0x6, 0x50c0, 0x80, 0x50c0, 0x40), 1), success)
mstore(0x5140, 0x11616573a278c2a5ce87f1a8b1b187026aede85db41c1593944d1b14479a01b1)
                    mstore(0x5160, 0x18ba22a3ca2d1755ddd28f06e2b2cf93cb439b5eab7ec73ef6702e2f035c3098)
mstore(0x5180, mload(0x3c40))
success := and(eq(staticcall(gas(), 0x7, 0x5140, 0x60, 0x5140, 0x40), 1), success)
mstore(0x51a0, mload(0x50c0))
                    mstore(0x51c0, mload(0x50e0))
mstore(0x51e0, mload(0x5140))
                    mstore(0x5200, mload(0x5160))
success := and(eq(staticcall(gas(), 0x6, 0x51a0, 0x80, 0x51a0, 0x40), 1), success)
mstore(0x5220, 0x248957605e6f0a9881ec2c4a375e8898dc8e6ce1f1bfb4ff6abd470567f7ce62)
                    mstore(0x5240, 0x0dae09ba53352990ed2e4c8d4bf920465eb536adc193bf348be452950324c2a5)
mstore(0x5260, mload(0x3c60))
success := and(eq(staticcall(gas(), 0x7, 0x5220, 0x60, 0x5220, 0x40), 1), success)
mstore(0x5280, mload(0x51a0))
                    mstore(0x52a0, mload(0x51c0))
mstore(0x52c0, mload(0x5220))
                    mstore(0x52e0, mload(0x5240))
success := and(eq(staticcall(gas(), 0x6, 0x5280, 0x80, 0x5280, 0x40), 1), success)
mstore(0x5300, 0x293714dc41f636976ced4b2e5eebc0d8b5bfa550be226d23034f8fac839e8016)
                    mstore(0x5320, 0x1c33b3e39cc7da64d258b3a2c5397a416eac7c04afd3b0f06b711eeeca4e8667)
mstore(0x5340, mload(0x3c80))
success := and(eq(staticcall(gas(), 0x7, 0x5300, 0x60, 0x5300, 0x40), 1), success)
mstore(0x5360, mload(0x5280))
                    mstore(0x5380, mload(0x52a0))
mstore(0x53a0, mload(0x5300))
                    mstore(0x53c0, mload(0x5320))
success := and(eq(staticcall(gas(), 0x6, 0x5360, 0x80, 0x5360, 0x40), 1), success)
mstore(0x53e0, 0x0cf7f734e9511f4338c82bc11d36fe4239a9d0917190b5151092f2036f0a4858)
                    mstore(0x5400, 0x2fb986f8afc0c42608c5621b3427bac3bd4873d276edd093c497b4f36efa71ed)
mstore(0x5420, mload(0x3ca0))
success := and(eq(staticcall(gas(), 0x7, 0x53e0, 0x60, 0x53e0, 0x40), 1), success)
mstore(0x5440, mload(0x5360))
                    mstore(0x5460, mload(0x5380))
mstore(0x5480, mload(0x53e0))
                    mstore(0x54a0, mload(0x5400))
success := and(eq(staticcall(gas(), 0x6, 0x5440, 0x80, 0x5440, 0x40), 1), success)
mstore(0x54c0, 0x1223f8ee426dbcc5d38aa2381248b872844ebafe3e2578dfa3f2561a6a203cf1)
                    mstore(0x54e0, 0x02f430d933d6fadb49de1a9168088540883e1f8c80a64233982a8a15da4ef581)
mstore(0x5500, mload(0x3cc0))
success := and(eq(staticcall(gas(), 0x7, 0x54c0, 0x60, 0x54c0, 0x40), 1), success)
mstore(0x5520, mload(0x5440))
                    mstore(0x5540, mload(0x5460))
mstore(0x5560, mload(0x54c0))
                    mstore(0x5580, mload(0x54e0))
success := and(eq(staticcall(gas(), 0x6, 0x5520, 0x80, 0x5520, 0x40), 1), success)
mstore(0x55a0, 0x05bdeabd162252a92826a64b29db064fbda724a0f62ed05e5390ddca77a92ff4)
                    mstore(0x55c0, 0x0c895832072bd227cea4cc4e228a58ca742a58d08c11095b6ed17d04c70d6fa8)
mstore(0x55e0, mload(0x3ce0))
success := and(eq(staticcall(gas(), 0x7, 0x55a0, 0x60, 0x55a0, 0x40), 1), success)
mstore(0x5600, mload(0x5520))
                    mstore(0x5620, mload(0x5540))
mstore(0x5640, mload(0x55a0))
                    mstore(0x5660, mload(0x55c0))
success := and(eq(staticcall(gas(), 0x6, 0x5600, 0x80, 0x5600, 0x40), 1), success)
mstore(0x5680, 0x090099641166609115710154de30cd4341f3be85aac2628ff0e672b8812ffe65)
                    mstore(0x56a0, 0x09026d6133ef65e173db878b1d00c24badb570e1210b789863f7d7975edd24a3)
mstore(0x56c0, mload(0x3d00))
success := and(eq(staticcall(gas(), 0x7, 0x5680, 0x60, 0x5680, 0x40), 1), success)
mstore(0x56e0, mload(0x5600))
                    mstore(0x5700, mload(0x5620))
mstore(0x5720, mload(0x5680))
                    mstore(0x5740, mload(0x56a0))
success := and(eq(staticcall(gas(), 0x6, 0x56e0, 0x80, 0x56e0, 0x40), 1), success)
mstore(0x5760, 0x0508bd933159f8c13b7c790d7c4fe5fad9e19206e8399bde7730b7bd792d8df0)
                    mstore(0x5780, 0x0d9e81c9c1f8839c882eb3a2c82e0244ad8dd28d0dcaa961f13888049a86a6c8)
mstore(0x57a0, mload(0x3d20))
success := and(eq(staticcall(gas(), 0x7, 0x5760, 0x60, 0x5760, 0x40), 1), success)
mstore(0x57c0, mload(0x56e0))
                    mstore(0x57e0, mload(0x5700))
mstore(0x5800, mload(0x5760))
                    mstore(0x5820, mload(0x5780))
success := and(eq(staticcall(gas(), 0x6, 0x57c0, 0x80, 0x57c0, 0x40), 1), success)
mstore(0x5840, 0x2633d792636a9b57029baad6294a6aaf7a1760acb3fd6f81826d4b67337a79aa)
                    mstore(0x5860, 0x260173fb515928e0ab10be7e7b5ce0110220de5d4798c8da5409f2f8cad010fd)
mstore(0x5880, mload(0x3d40))
success := and(eq(staticcall(gas(), 0x7, 0x5840, 0x60, 0x5840, 0x40), 1), success)
mstore(0x58a0, mload(0x57c0))
                    mstore(0x58c0, mload(0x57e0))
mstore(0x58e0, mload(0x5840))
                    mstore(0x5900, mload(0x5860))
success := and(eq(staticcall(gas(), 0x6, 0x58a0, 0x80, 0x58a0, 0x40), 1), success)
mstore(0x5920, 0x0e8279d601b9ac4effdeb65564f8bb392b3ccc25d4c1717a514832759c682e7c)
                    mstore(0x5940, 0x07e1fa4e4bc8703d9469cc112e02ccd004e9d1417205a07d839c033a3eb36f4b)
mstore(0x5960, mload(0x3d60))
success := and(eq(staticcall(gas(), 0x7, 0x5920, 0x60, 0x5920, 0x40), 1), success)
mstore(0x5980, mload(0x58a0))
                    mstore(0x59a0, mload(0x58c0))
mstore(0x59c0, mload(0x5920))
                    mstore(0x59e0, mload(0x5940))
success := and(eq(staticcall(gas(), 0x6, 0x5980, 0x80, 0x5980, 0x40), 1), success)
mstore(0x5a00, mload(0x620))
                    mstore(0x5a20, mload(0x640))
mstore(0x5a40, mload(0x3d80))
success := and(eq(staticcall(gas(), 0x7, 0x5a00, 0x60, 0x5a00, 0x40), 1), success)
mstore(0x5a60, mload(0x5980))
                    mstore(0x5a80, mload(0x59a0))
mstore(0x5aa0, mload(0x5a00))
                    mstore(0x5ac0, mload(0x5a20))
success := and(eq(staticcall(gas(), 0x6, 0x5a60, 0x80, 0x5a60, 0x40), 1), success)
mstore(0x5ae0, mload(0x660))
                    mstore(0x5b00, mload(0x680))
mstore(0x5b20, mload(0x3da0))
success := and(eq(staticcall(gas(), 0x7, 0x5ae0, 0x60, 0x5ae0, 0x40), 1), success)
mstore(0x5b40, mload(0x5a60))
                    mstore(0x5b60, mload(0x5a80))
mstore(0x5b80, mload(0x5ae0))
                    mstore(0x5ba0, mload(0x5b00))
success := and(eq(staticcall(gas(), 0x6, 0x5b40, 0x80, 0x5b40, 0x40), 1), success)
mstore(0x5bc0, mload(0x6a0))
                    mstore(0x5be0, mload(0x6c0))
mstore(0x5c00, mload(0x3dc0))
success := and(eq(staticcall(gas(), 0x7, 0x5bc0, 0x60, 0x5bc0, 0x40), 1), success)
mstore(0x5c20, mload(0x5b40))
                    mstore(0x5c40, mload(0x5b60))
mstore(0x5c60, mload(0x5bc0))
                    mstore(0x5c80, mload(0x5be0))
success := and(eq(staticcall(gas(), 0x6, 0x5c20, 0x80, 0x5c20, 0x40), 1), success)
mstore(0x5ca0, mload(0x580))
                    mstore(0x5cc0, mload(0x5a0))
mstore(0x5ce0, mload(0x3de0))
success := and(eq(staticcall(gas(), 0x7, 0x5ca0, 0x60, 0x5ca0, 0x40), 1), success)
mstore(0x5d00, mload(0x5c20))
                    mstore(0x5d20, mload(0x5c40))
mstore(0x5d40, mload(0x5ca0))
                    mstore(0x5d60, mload(0x5cc0))
success := and(eq(staticcall(gas(), 0x6, 0x5d00, 0x80, 0x5d00, 0x40), 1), success)
mstore(0x5d80, mload(0xc40))
                    mstore(0x5da0, mload(0xc60))
mstore(0x5dc0, mload(0x46c0))
success := and(eq(staticcall(gas(), 0x7, 0x5d80, 0x60, 0x5d80, 0x40), 1), success)
mstore(0x5de0, mload(0x5d00))
                    mstore(0x5e00, mload(0x5d20))
mstore(0x5e20, mload(0x5d80))
                    mstore(0x5e40, mload(0x5da0))
success := and(eq(staticcall(gas(), 0x6, 0x5de0, 0x80, 0x5de0, 0x40), 1), success)
mstore(0x5e60, mload(0xc80))
                    mstore(0x5e80, mload(0xca0))
mstore(0x5ea0, mload(0x4700))
success := and(eq(staticcall(gas(), 0x7, 0x5e60, 0x60, 0x5e60, 0x40), 1), success)
mstore(0x5ec0, mload(0x5de0))
                    mstore(0x5ee0, mload(0x5e00))
mstore(0x5f00, mload(0x5e60))
                    mstore(0x5f20, mload(0x5e80))
success := and(eq(staticcall(gas(), 0x6, 0x5ec0, 0x80, 0x5ec0, 0x40), 1), success)
mstore(0x5f40, mload(0xcc0))
                    mstore(0x5f60, mload(0xce0))
mstore(0x5f80, mload(0x4740))
success := and(eq(staticcall(gas(), 0x7, 0x5f40, 0x60, 0x5f40, 0x40), 1), success)
mstore(0x5fa0, mload(0x5ec0))
                    mstore(0x5fc0, mload(0x5ee0))
mstore(0x5fe0, mload(0x5f40))
                    mstore(0x6000, mload(0x5f60))
success := and(eq(staticcall(gas(), 0x6, 0x5fa0, 0x80, 0x5fa0, 0x40), 1), success)
mstore(0x6020, mload(0xd00))
                    mstore(0x6040, mload(0xd20))
mstore(0x6060, mload(0x4780))
success := and(eq(staticcall(gas(), 0x7, 0x6020, 0x60, 0x6020, 0x40), 1), success)
mstore(0x6080, mload(0x5fa0))
                    mstore(0x60a0, mload(0x5fc0))
mstore(0x60c0, mload(0x6020))
                    mstore(0x60e0, mload(0x6040))
success := and(eq(staticcall(gas(), 0x6, 0x6080, 0x80, 0x6080, 0x40), 1), success)
mstore(0x6100, mload(0xd40))
                    mstore(0x6120, mload(0xd60))
mstore(0x6140, mload(0x47c0))
success := and(eq(staticcall(gas(), 0x7, 0x6100, 0x60, 0x6100, 0x40), 1), success)
mstore(0x6160, mload(0x6080))
                    mstore(0x6180, mload(0x60a0))
mstore(0x61a0, mload(0x6100))
                    mstore(0x61c0, mload(0x6120))
success := and(eq(staticcall(gas(), 0x6, 0x6160, 0x80, 0x6160, 0x40), 1), success)
mstore(0x61e0, mload(0xd80))
                    mstore(0x6200, mload(0xda0))
mstore(0x6220, mload(0x4800))
success := and(eq(staticcall(gas(), 0x7, 0x61e0, 0x60, 0x61e0, 0x40), 1), success)
mstore(0x6240, mload(0x6160))
                    mstore(0x6260, mload(0x6180))
mstore(0x6280, mload(0x61e0))
                    mstore(0x62a0, mload(0x6200))
success := and(eq(staticcall(gas(), 0x6, 0x6240, 0x80, 0x6240, 0x40), 1), success)
mstore(0x62c0, mload(0xc80))
                    mstore(0x62e0, mload(0xca0))
mstore(0x6300, mload(0x3fc0))
success := and(eq(staticcall(gas(), 0x7, 0x62c0, 0x60, 0x62c0, 0x40), 1), success)
mstore(0x6320, mload(0xc40))
                    mstore(0x6340, mload(0xc60))
mstore(0x6360, mload(0x62c0))
                    mstore(0x6380, mload(0x62e0))
success := and(eq(staticcall(gas(), 0x6, 0x6320, 0x80, 0x6320, 0x40), 1), success)
mstore(0x63a0, mload(0xcc0))
                    mstore(0x63c0, mload(0xce0))
mstore(0x63e0, mload(0x4260))
success := and(eq(staticcall(gas(), 0x7, 0x63a0, 0x60, 0x63a0, 0x40), 1), success)
mstore(0x6400, mload(0x6320))
                    mstore(0x6420, mload(0x6340))
mstore(0x6440, mload(0x63a0))
                    mstore(0x6460, mload(0x63c0))
success := and(eq(staticcall(gas(), 0x6, 0x6400, 0x80, 0x6400, 0x40), 1), success)
mstore(0x6480, mload(0xd00))
                    mstore(0x64a0, mload(0xd20))
mstore(0x64c0, mload(0x4400))
success := and(eq(staticcall(gas(), 0x7, 0x6480, 0x60, 0x6480, 0x40), 1), success)
mstore(0x64e0, mload(0x6400))
                    mstore(0x6500, mload(0x6420))
mstore(0x6520, mload(0x6480))
                    mstore(0x6540, mload(0x64a0))
success := and(eq(staticcall(gas(), 0x6, 0x64e0, 0x80, 0x64e0, 0x40), 1), success)
mstore(0x6560, mload(0xd40))
                    mstore(0x6580, mload(0xd60))
mstore(0x65a0, mload(0x4560))
success := and(eq(staticcall(gas(), 0x7, 0x6560, 0x60, 0x6560, 0x40), 1), success)
mstore(0x65c0, mload(0x64e0))
                    mstore(0x65e0, mload(0x6500))
mstore(0x6600, mload(0x6560))
                    mstore(0x6620, mload(0x6580))
success := and(eq(staticcall(gas(), 0x6, 0x65c0, 0x80, 0x65c0, 0x40), 1), success)
mstore(0x6640, mload(0xd80))
                    mstore(0x6660, mload(0xda0))
mstore(0x6680, mload(0x4640))
success := and(eq(staticcall(gas(), 0x7, 0x6640, 0x60, 0x6640, 0x40), 1), success)
mstore(0x66a0, mload(0x65c0))
                    mstore(0x66c0, mload(0x65e0))
mstore(0x66e0, mload(0x6640))
                    mstore(0x6700, mload(0x6660))
success := and(eq(staticcall(gas(), 0x6, 0x66a0, 0x80, 0x66a0, 0x40), 1), success)
mstore(0x6720, mload(0x6240))
                    mstore(0x6740, mload(0x6260))
mstore(0x6760, mload(0x66a0))
                    mstore(0x6780, mload(0x66c0))
mstore(0x67a0, mload(0xe20))
                    mstore(0x67c0, mload(0xe40))
mstore(0x67e0, mload(0xe60))
                    mstore(0x6800, mload(0xe80))
mstore(0x6820, keccak256(0x6720, 256))
mstore(26688, mod(mload(26656), f_q))
mstore(0x6860, mulmod(mload(0x6840), mload(0x6840), f_q))
mstore(0x6880, mulmod(1, mload(0x6840), f_q))
mstore(0x68a0, mload(0x67a0))
                    mstore(0x68c0, mload(0x67c0))
mstore(0x68e0, mload(0x6880))
success := and(eq(staticcall(gas(), 0x7, 0x68a0, 0x60, 0x68a0, 0x40), 1), success)
mstore(0x6900, mload(0x6720))
                    mstore(0x6920, mload(0x6740))
mstore(0x6940, mload(0x68a0))
                    mstore(0x6960, mload(0x68c0))
success := and(eq(staticcall(gas(), 0x6, 0x6900, 0x80, 0x6900, 0x40), 1), success)
mstore(0x6980, mload(0x67e0))
                    mstore(0x69a0, mload(0x6800))
mstore(0x69c0, mload(0x6880))
success := and(eq(staticcall(gas(), 0x7, 0x6980, 0x60, 0x6980, 0x40), 1), success)
mstore(0x69e0, mload(0x6760))
                    mstore(0x6a00, mload(0x6780))
mstore(0x6a20, mload(0x6980))
                    mstore(0x6a40, mload(0x69a0))
success := and(eq(staticcall(gas(), 0x6, 0x69e0, 0x80, 0x69e0, 0x40), 1), success)
mstore(0x6a60, mload(0x6900))
                    mstore(0x6a80, mload(0x6920))
mstore(0x6aa0, 0x198e9393920d483a7260bfb731fb5d25f1aa493335a9e71297e485b7aef312c2)
            mstore(0x6ac0, 0x1800deef121f1e76426a00665e5c4479674322d4f75edadd46debd5cd992f6ed)
            mstore(0x6ae0, 0x090689d0585ff075ec9e99ad690c3395bc4b313370b38ef355acdadcd122975b)
            mstore(0x6b00, 0x12c85ea5db8c6deb4aab71808dcb408fe3d1e7690c43d37b4ce6cc0166fa7daa)
mstore(0x6b20, mload(0x69e0))
                    mstore(0x6b40, mload(0x6a00))
mstore(0x6b60, 0x1cf8832646b03608390dd9a6f7c6de581e065a2c99be3cd7e2259c0738c19051)
            mstore(0x6b80, 0x068db4b87c697bd9906371fc2e24e522e20ca527952bfe058b3225974acf545f)
            mstore(0x6ba0, 0x01fdf661dc9860278308a39ac4e8214b55996acd015119a41baf7dc2ecbcd71b)
            mstore(0x6bc0, 0x2f69939a4701e1090159fcd62d8804f026626380dc72d6f2fa9ea681671c8800)
success := and(eq(staticcall(gas(), 0x8, 0x6a60, 0x180, 0x6a60, 0x20), 1), success)
success := and(eq(mload(0x6a60), 1), success)

            if not(success) { revert(0, 0) }
            return(0, 0)

                }
            }
        }